/**************************************************************************************************
                                        CUSTOM METHODS
 *************************************************************************************************/

// Check which test suites have been implemented
def listTests() {
    
    def availiableTests = []
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")
        
    if (testFolder.exists()) {
        availiableTests.add("testDebug")
    }
    
    if (androidTestFolder.exists()) {
        availiableTests.add("connectedAndroidTestDebug")
    }
   
    return availiableTests
 }
 
 def listTestFiles() {
    
    def testFiles = []
    def testList = listTests()
  
    if (testList.contains("testDebug")) {
        testFiles.add("${buildDir}/jacoco/testDebug.exec")
    }
    
    if (testList.contains("connectedAndroidTestDebug")) {
        testFiles.add("${buildDir}/outputs/code-coverage/connected/coverage.ec")
    }
   
    return testFiles
 }
 
/**************************************************************************************************
                                        CUSTOM TASKS
 *************************************************************************************************/
 
// Code to merge JaCoCo .exec/.ec files
// Outputs to ${buildDir}/jacoco/TASK_NAME.exec
task jacocoMergeGen(type: JacocoMerge, dependsOn: listTests()) {
    description = "Merge test code coverage results from all different test types"

    executionData = files(listTestFiles())
}
 
// Code to generate JaCoCo reports
task jacocoTestDebugReport(type:JacocoReport, dependsOn: ["jacocoMergeGen"]) {
    group = "Reporting"
    description = "Generate a JaCoCo code-coverage report for debug tests"

    classDirectories = fileTree( // Include relevant .class files
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java") // Set src directories
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])

    // Generate report from merged .exec file
    executionData = files("${buildDir}/jacoco/jacocoMergeGen.exec")

    reports { // Report output config
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco"
        }
    }
}

// Define the snapshot version to be the git hash
task generateSnapshotVersion {
    def gitHash = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = gitHash
    }
    doLast {
        project.ext.snapshotVersionCode = gitHash.toString().trim()
    }
}

task releaseVersion << {
    version = releaseVersionCode
}

task snapshotVersion(dependsOn: "generateSnapshotVersion") << {
    version = snapshotVersionCode
}