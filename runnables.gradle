/**************************************************************************************************
                                        GRADLE RUNNABLES
 *************************************************************************************************/

/*
*   @author: marshallbradley93@gmail.com
*
*   This Gradle script contains common build logic in the form of runnables (both tasks and methods).
*   These methods are dispatched to the relevant project files via either local or remote.gradle.
*
*   @TODO: Convert to custom Gradle plugin
*/

/**************************************************************************************************
                                            METHODS
 *************************************************************************************************/

// Check which test types (unit-test, androidtest) have been implemented
def listTests() {

    def availiableTests = []
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")

    // Check unit-test location exists
    if (testFolder.exists()) {
        availiableTests.add("testDebugUnitTest")
    }

    // Check androidtest location exists
    if (androidTestFolder.exists()) {
        availiableTests.add("connectedDebugAndroidTest")
    }

    // Return a list of test types that have been implemented
    return availiableTests
 }

 // List locations of availiable generated JaCoCo files
 def  listTestFiles() {

    description = "Merge code coverage files from all availiable test types"

    def testFiles = [];
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")

    // Check unit-test location exists
    if (testFolder.exists()) {
       testFiles.add("${buildDir}/jacoco/testDebugUnitTest.exec")
    }

    // Check androidtest location exists
    if (androidTestFolder.exists()) {
        testFiles.add("${buildDir}/outputs/code-coverage/connected/coverage.ec")
    }

    // Return list of file locations
    return testFiles;
 }

/**************************************************************************************************
                                            TASKS
 *************************************************************************************************/
// Define the snapshot version to be the git hash
task generateSnapshotVersion {
    def gitHash = new ByteArrayOutputStream()
    def date = (new Date()).format('yyyyMMddHHmm')
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = gitHash
    }
    doLast {
        // Package the snapshot version into an external object
        project.ext.snapshotVersionCode = 'b' + date + '_v' + gitHash.toString().trim()
    }
}

// Set the version to release (required by Artifactory)
task releaseVersion << {
    version = releaseVersionCode
}

// Set the version to snapshot (required by Artifactory)
task snapshotVersion(dependsOn: "generateSnapshotVersion") << {
    version = snapshotVersionCode
}
